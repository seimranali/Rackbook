@page "/items"
@using Rackbook.Application
@using Rackbook.Application.ManageItemGroup.Queries
@using Rackbook.Application.ManageItemUnit.Queries
@using Rackbook.Application.ManageItems.Queries
@using Rackbook.Application.ManageItems
@inject IMediator mediator
@inject DialogService DialogService
@implements IDisposable

<RadzenContentContainer>

    <RadzenRow class="mb-2">
        <RadzenColumn Size="4">
            <RadzenText TextStyle="TextStyle.DisplayH5" TagName="TagName.H5" Text="Items" />
        </RadzenColumn>
        <RadzenColumn Size="8">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center">
                <RadzenBreadCrumb>
                    <Template Context="item">
                        <RadzenBadge IsPill="true" Text="@item.Text"></RadzenBadge>
                    </Template>
                    <ChildContent>
                        <RadzenBreadCrumbItem Text="Setup" />
                        <RadzenBreadCrumbItem Text="Inventory" />
                        <RadzenBreadCrumbItem Icon="add" Text="Items" />
                    </ChildContent>
                </RadzenBreadCrumb>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>


    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="0.15rem">
            <RadzenFormField Text="Filter" class="rz-w-25">
                <RadzenTextBox typeof="search" aria-label="find" @bind-Value="FilterInput" Name="FilterInput" Placeholder="Filter..." class="rz-search-input rz-w-100" @oninput=OnInputFindItemUnit @onkeypress:stopPropagation="true">

                </RadzenTextBox>
            </RadzenFormField>
            <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Shade="Shade.Lighter" Text="Add new" Icon="add" Click=OnNew>

            </RadzenButton>
        </RadzenStack>
        <RadzenDataGrid @ref=@grid TItem="vw_Items" Data=Data LoadData=LoadData IsLoading="IsLoadingGrid" Count="TotalRowCount" PageSize="PageSize" ShowPagingSummary="true" AllowPaging="true" AllowAlternatingRows="false" AllowFiltering="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterDelay="500" Style="height:74vh !important;margin-top:5px !important;" @bind-Value=SelectedRow SelectionMode="DataGridSelectionMode.Single">
            <Columns>
                <RadzenDataGridColumn TItem="vw_Items" Property="ItemTypeName" Title="Item Type" />
                <RadzenDataGridColumn TItem="vw_Items" Property="ItemGroupName" Title="Item Group" />
                <RadzenDataGridColumn TItem="vw_Items" Property="ItemCode" Title="Item Code" />
                <RadzenDataGridColumn TItem="vw_Items" Property="ItemName" Title="Item Name" />
                <RadzenDataGridColumn TItem="vw_Items" Property="ItemUnitName" Title="Item Unit" />
                <RadzenDataGridColumn TItem="vw_Items" Property="PurchaseUnitPrice" Title="Purchase Price" />
                <RadzenDataGridColumn TItem="vw_Items" Property="SellingUnitPrice" Title="Sell Price" />
                <RadzenDataGridColumn TItem="ItemGroup" Property="IsActive" Title="Status">
                    <Template Context="item">
                        <RadzenBadge IsPill="true" BadgeStyle="@(item.IsActive ? BadgeStyle.Success:BadgeStyle.Light)" Variant="Variant.Flat" Shade="Shade.Lighter" Text="@(item.IsActive ? "Active":"Inactive")"></RadzenBadge>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="vw_Items" Property="ItemID" Title="Action">
                    <Template Context="item">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="edit" Click=@(()=> OnEdit(item.ItemID))></RadzenButton>
                            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" Click=@(()=> OnDelete(item.ItemID))></RadzenButton>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>


</RadzenContentContainer>



@code {

    bool rendered;
    bool IsLoadingGrid;
    bool IsLoadingPage;
    bool IsEditMode;


    int PageSize=10;
    int TotalRowCount;

    string? FilterInput;

    RadzenDataGrid<vw_Items>? grid;
    Items? model;

    List<vw_Items>? Data;

    vw_Items? selectItem;
    vw_Items? deselectItem;

    IList<vw_Items> SelectedRow = new List<vw_Items>();

    GenericResult<Items>? Result;

    RadzenProgressBar progressBar;


    protected override async Task OnInitializedAsync()
    {
        IsLoadingPage = true;
        try
        {
            model = new Items();
            DialogService.OnSideClose += Close;

        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {

            IsLoadingPage = false;
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
                   


            rendered = true;
            
        }


        await Task.CompletedTask;
    }




    async Task OnNew()
    {
        await DialogService.OpenSideAsync<_ItemsPage>("Create Item",
        new Dictionary<string, object>()
                                {
            {"id", null}

                                }, new SideDialogOptions
                                {
                                    Position = DialogPosition.Right,

                                    Height = "98vh",
                                    Width = "480px",
                                    Style = "top:10px;right:10px;bottom:15px;"

                                });
    }

    async Task OnEdit(int id)
    {
        try
        {
            await DialogService.OpenSideAsync<_ItemsPage>("Update Item",
        new Dictionary<string, object>()
                                    {
            {"id", id}

                                    }, new SideDialogOptions
                                    {
                                        Position = DialogPosition.Right,

                                        Height = "98vh",
                                        Width = "480px",
                                        Style = "top:10px;right:10px;bottom:15px;"

                                    });
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    async Task OnDelete(int id)
    {
        try
        {


            bool? flg = await DialogService.Confirm("Are you sure!, You want to delete this record?", "Confirm", new ConfirmOptions { OkButtonText="Yes", CancelButtonText="No" });
            if (flg.HasValue)
            {
                if (flg.Value)
                {

                    Result = await mediator.Send(new DeleteItemsCommand() { Id = id });

                    

                    if (Result is not null)
                    {
                        if (Result.Status)
                        {
                            await DialogService.Alert(Result.Message, "Inform");
                            await OnReset();
                        }
                        else
                        {
                            await DialogService.Alert(Result.Message, "Error");
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    private void OnInputFindItemUnit(ChangeEventArgs args)
    {
        try
        {

            FilterInput = args.Value?.ToString();
            
            if (grid is not null)
                grid.Reload();

        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    async Task OnReset()
    {
        try
        {
            model = new Items();
            Result = new GenericResult<Items>();
            SelectedRow = new List<vw_Items>();
            if (grid is not null)
                await grid.Reload();
            
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    public async Task LoadData(LoadDataArgs args)
    {
        IsLoadingGrid = true;
        try
        {

            await Task.Yield();

            IQueryable<vw_Items> query = await mediator.Send(new ReadAllItems(){  filter = x => x.CompanyID == 1 });

            if (args is not null)
            {
                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);


                if (!string.IsNullOrEmpty(FilterInput))
                {
                    query = query.Where(x =>
                        x.ItemCode.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemName.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemDescription.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemGroupName.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemGroupDescription.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemTypeName.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemUnitName.ToLower().Contains(FilterInput.ToLower()) ||
                    x.ItemUnitDescription.ToLower().Contains(FilterInput.ToLower()));
                }

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);
                else
                    query = query.OrderByDescending(o => o.ItemID);


                TotalRowCount = query.Count();

                if (args.Skip.HasValue && args.Top.HasValue)
                {
                    if (args.Top.Value == 0)
                        query = query.Skip(args.Skip.Value).Take(PageSize);
                    else
                        query = query.Skip(args.Skip.Value).Take(args.Top.Value);
                }
                else
                {
                    query = query.Skip(0).Take(PageSize);
                }

            }

            Data = await query.ToListAsync();

        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {
            IsLoadingGrid = false;
        }

    }




    public async void Close(dynamic result)
    {
        try
        {
            if (result is Items)
                await grid.Reload();
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    bool IsDisposed;
    private void Disposed(bool IsDisposing)
    {
        if (IsDisposing)
        {
            if (grid is not null)
                grid.Dispose();

            if (DialogService is not null)
                DialogService.Dispose();
        }
        IsDisposed = true;
    }

    public void Dispose()
    {
        Disposed(true);
        GC.SuppressFinalize(this);
    }

}
